{
	"info": {
		"_postman_id": "33f2f20e-4ae2-42ad-8c56-53196432e628",
		"name": "PyMatcha",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Create user no JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ef614bd-e92a-4a6b-9e16-2eb9a8c3d606",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Missing json body.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user malformed JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3ae559c-9587-4ad4-a79e-4a6e851da11c",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"The Json Body is malformed\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user missing key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ccdbec95-4dfd-4618-9772-5cef79f73098",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Missing key(s) ['username'] to perform action.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user too many keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "893bac2d-763b-4e34-8507-f5f2cdc43bb7",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"You can't specify key 'role'.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\",\n\t\"username\": \"{{user_username}}\",\n\t\"role\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd7c5637-25c6-4a0c-8c8f-58f77b3846e7",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user email already taken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c910369c-9203-4a5a-9b35-3a7e069f2165",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 409",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"ConflictError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcc07149-ec79-43b2-9a04-9d6741569cc9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{user_email}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{user_email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user not existant",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08f93b56-aed9-414e-b953-9c5e2a91a9c7",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"tests[\"JSON return code is 404\"] = response.code == 404",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{user_email}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{user_email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user after delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24ee2a8f-b47e-46d6-bfe3-7b4a4f6c17e7",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user without confirmation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00bf2176-6e9f-4c1d-a0da-a17ef0b9c462",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"tests[\"JSON return code is 401\"] = response.code == 401",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"User needs to be confirmed first.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"password\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm user without debug token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0079172-864c-446a-aaab-337ed1f50a5f",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"tests[\"JSON return code is 401\"] = response.code == 401",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Missing debug auth token.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/debug/users/confirm/-1",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"users",
								"confirm",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm user unknow user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5c23cd1-3c22-4d9f-abab-ab5a2cdd8274",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"tests[\"JSON return code is 404\"] = response.code == 404",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"User -1 not found\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"url": {
							"raw": "{{host}}/debug/users/confirm/-1",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"users",
								"confirm",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d90b1efa-eb85-49eb-8ebd-af568584d3ff",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Message is correct\"] = response.message == \"User successfully confirmed\"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"url": {
							"raw": "{{host}}/debug/users/confirm/{{user_email}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"users",
								"confirm",
								"{{user_email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm user already confirmed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ecb334d-3cbc-482e-9d1b-e9a8fd905b93",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Message is correct\"] = response.message == \"User already confirmed\"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"url": {
							"raw": "{{host}}/debug/users/confirm/{{user_email}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"users",
								"confirm",
								"{{user_email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user no JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d8bf89b-e772-4f7d-aaf1-b8521d2adb55",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Missing json body.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user malformed JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aae59bb2-7762-4746-b8f5-d3afd170ca5e",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"The Json Body is malformed\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user missing username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f376d93-fd41-46e3-ab73-595cde6175b4",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Missing key(s) ['username'] to perform action.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"password\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user with username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e10688e6-53e0-43de-b9c6-1e2fdab08e4b",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"",
									"pm.collectionVariables.set(\"user_token\", response.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"password\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user with email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef228ced-b948-4beb-a04c-40c1efbc08f7",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"",
									"pm.collectionVariables.set(\"user_token\", response.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"password\": \"{{user_password}}\",\n\t\"username\": \"{{user_email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03880fb4-1c4c-41cc-8fc3-1d55b6bdae39",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2b7ab20b-c5a1-4b8c-a4c2-a9f501f9a02c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get all users missing auth header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37b58aa3-2003-4255-b4a6-16a0ec509fb5",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"tests[\"JSON return code is 401\"] = response.code == 401",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Missing Authorization Header\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users expired auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1683f7f0-a248-497c-b18a-dd1adc6ac0f5",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"tests[\"JSON return code is 401\"] = response.code == 401",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"The access token has expired\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{expired_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "928cf7ee-dd14-459e-a299-a2e31ebbea4d",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON array is not empty\"] = response.length != 0"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one user by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d05304d2-c671-49dd-adc6-2a0cd7d7cbc4",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"user_email = pm.collectionVariables.get(\"user_email\");",
									"user_username = pm.collectionVariables.get(\"user_username\");",
									"",
									"tests[\"Is email correct\"] = response.email == user_email",
									"tests[\"Is username correct\"] = response.username == user_username"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{user_username}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{user_username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one user by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "157d53ec-3d71-453e-90bc-172e1d7d3531",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"user_email = pm.collectionVariables.get(\"user_email\");",
									"user_username = pm.collectionVariables.get(\"user_username\");",
									"",
									"tests[\"Is email correct\"] = response.email == user_email",
									"tests[\"Is username correct\"] = response.username == user_username"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{user_email}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{user_email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get online users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50e7dc59-141e-4e61-bdab-cca8a83ef81e",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"user_email = pm.collectionVariables.get(\"user_email\");",
									"user_username = pm.collectionVariables.get(\"user_username\");",
									"",
									"tests[\"Is email correct\"] = response.email == user_email",
									"tests[\"Is username correct\"] = response.username == user_username"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{user_email}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{user_email}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{user_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "2cc3d134-eb34-4730-8210-2065800a7560",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "86a65fc9-d3fe-4c9c-bcb4-e0a093425b33",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "874e6486-5cbf-4221-bad4-f23d3e1434ed",
			"key": "host",
			"value": "http://127.0.0.1:5000",
			"type": "string"
		},
		{
			"id": "338a0aa6-eca3-46fb-9823-c8d998cdaec9",
			"key": "user_email",
			"value": "foo@example.org",
			"type": "string"
		},
		{
			"id": "dea84a15-11bb-4d3f-bb1c-3b7739075f87",
			"key": "user_username",
			"value": "bar",
			"type": "string"
		},
		{
			"id": "6c971411-78c5-4143-8210-b02c6ca5c397",
			"key": "user_password",
			"value": "admin",
			"type": "string"
		},
		{
			"id": "02b3d365-73b2-45dd-b362-b129601f614f",
			"key": "debug_token",
			"value": "xX69jules69Xx",
			"type": "string"
		},
		{
			"id": "f02e23ad-6109-4c1d-84df-d6222cd2107c",
			"key": "user_token",
			"value": "",
			"type": "string"
		},
		{
			"id": "d9612a55-9b82-4cd5-87e1-ddcda8ded553",
			"key": "expired_token",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTAyNDIyNjQsIm5iZiI6MTU5MDI0MjI2NCwianRpIjoiNTM0ZGI5NzQtOWE4Ni00MGViLWE1NDEtMDg3N2ZmNzQ3NDVhIiwiZXhwIjoxNTkwMjQyMzI0LCJpZGVudGl0eSI6eyJpZCI6NTEyLCJlbWFpbCI6ImZvb0BleGFtcGxlLm9yZyIsInVzZXJuYW1lIjoiYmFyIiwiaXNfb25saW5lIjp0cnVlLCJkYXRlX2xhc3RzZWVuIjoiU2F0LCAyMyBNYXkgMjAyMCAxMzo1Nzo0NCBHTVQifSwiZnJlc2giOnRydWUsInR5cGUiOiJhY2Nlc3MifQ.NTp2P0WNkXDwzuzrcNIQdeAfizQ57HQgkzBLSvY1yHU",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}